// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package streams

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// StreamManagerMetaData contains all meta data concerning the StreamManager contract.
var StreamManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"RefundAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"RefundRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"ServiceSharePercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"StreamApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"streamAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"StreamRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"allowRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"approveStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"profiles\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"refundAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"profileNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"aiModels\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"computeRequirements\",\"type\":\"uint256[]\"}],\"name\":\"requestStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refund\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stream\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"revokeRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceSharePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setServiceSharePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f5ffd5b50604051614d47380380614d4783398181016040528101906100319190610275565b335f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a2575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009991906102af565b60405180910390fd5b6100b18161014560201b60201c565b508060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060146005819055506040518060400160405280600581526020017f312e302e300000000000000000000000000000000000000000000000000000008152506001908161013e9190610505565b50506105d4565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102338261020a565b9050919050565b5f61024482610229565b9050919050565b6102548161023a565b811461025e575f5ffd5b50565b5f8151905061026f8161024b565b92915050565b5f6020828403121561028a57610289610206565b5b5f61029784828501610261565b91505092915050565b6102a981610229565b82525050565b5f6020820190506102c25f8301846102a0565b92915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061034357607f821691505b602082108103610356576103556102ff565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026103b87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261037d565b6103c2868361037d565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6104066104016103fc846103da565b6103e3565b6103da565b9050919050565b5f819050919050565b61041f836103ec565b61043361042b8261040d565b848454610389565b825550505050565b5f5f905090565b61044a61043b565b610455818484610416565b505050565b5b818110156104785761046d5f82610442565b60018101905061045b565b5050565b601f8211156104bd5761048e8161035c565b6104978461036e565b810160208510156104a6578190505b6104ba6104b28561036e565b83018261045a565b50505b505050565b5f82821c905092915050565b5f6104dd5f19846008026104c2565b1980831691505092915050565b5f6104f583836104ce565b9150826002028217905092915050565b61050e826102c8565b67ffffffffffffffff811115610527576105266102d2565b5b610531825461032c565b61053c82828561047c565b5f60209050601f83116001811461056d575f841561055b578287015190505b61056585826104ea565b8655506105cc565b601f19841661057b8661035c565b5f5b828110156105a25784890151825560018201915060208501945060208101905061057d565b868310156105bf57848901516105bb601f8916826104ce565b8355505b6001600288020188555050505b505050505050565b614766806105e15f395ff3fe608060405234801561000f575f5ffd5b50600436106100f3575f3560e01c806354fd4d50116100955780638da5cb5b116100645780638da5cb5b146102745780639c15618d14610292578063c36fe3d6146102ae578063f2fde38b146102de576100f3565b806354fd4d50146101e7578063715018a61461020557806381d12c581461020f5780638d40bd0314610244576100f3565b8063225f6541116100d1578063225f654114610175578063240dc686146101915780633013ce29146101ad5780634b51438c146101cb576100f3565b80630f514717146100f757806313186d0e146101275780631e3e868b14610145575b5f5ffd5b610111600480360381019061010c919061143d565b6102fa565b60405161011e9190611482565b60405180910390f35b61012f610323565b60405161013c91906114aa565b60405180910390f35b61015f600480360381019061015a91906117a1565b610329565b60405161016c91906114aa565b60405180910390f35b61018f600480360381019061018a919061143d565b61077a565b005b6101ab60048036038101906101a6919061143d565b6108c5565b005b6101b56109be565b6040516101c291906118d3565b60405180910390f35b6101e560048036038101906101e0919061143d565b6109e3565b005b6101ef610b2c565b6040516101fc919061194c565b60405180910390f35b61020d610bb8565b005b6102296004803603810190610224919061143d565b610bcb565b60405161023b9695949392919061198c565b60405180910390f35b61025e600480360381019061025991906119eb565b610c65565b60405161026b9190611a29565b60405180910390f35b61027c610fb7565b6040516102899190611a29565b60405180910390f35b6102ac60048036038101906102a7919061143d565b610fde565b005b6102c860048036038101906102c3919061143d565b611061565b6040516102d5919061194c565b60405180910390f35b6102f860048036038101906102f39190611a6c565b6110fc565b005b5f60035f8381526020019081526020015f205f0160019054906101000a900460ff169050919050565b60055481565b5f5f73ffffffffffffffffffffffffffffffffffffffff1660035f8781526020019081526020015f205f0160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c290611ae1565b60405180910390fd5b5f84510361040e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040590611b49565b60405180910390fd5b8151835114610452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044990611bd7565b60405180910390fd5b5f845167ffffffffffffffff81111561046e5761046d6114d7565b5b60405190808252806020026020018201604052801561049c5781602001602082028036833780820191505090505b5090505f5f90505b855181101561055a575f8682815181106104c1576104c0611bf5565b5b60200260200101516040516020016104d99190611c5c565b604051602081830303815290604052805190602001205f1c905086828151811061050657610505611bf5565b5b602002602001015160045f8381526020019081526020015f20908161052b9190611e66565b50808383815181106105405761053f611bf5565b5b6020026020010181815250505080806001019150506104a4565b506040518061012001604052805f151581526020015f151581526020015f151581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020018281526020018781526020018581526020018481525060035f8881526020019081526020015f205f820151815f015f6101000a81548160ff0219169083151502179055506020820151815f0160016101000a81548160ff0219169083151502179055506040820151815f0160026101000a81548160ff0219169083151502179055506060820151815f0160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160020190805190602001906106e19291906112cf565b5060c0820151816003015560e082015181600401908051906020019061070892919061131a565b506101008201518160050190805190602001906107269291906112cf565b50905050853373ffffffffffffffffffffffffffffffffffffffff167fcf93cb8f3f726dd083e429df912bf338cc7f82cc3344b3ab5fa960ef0357e32160405160405180910390a385915050949350505050565b610782611180565b5f60035f8381526020019081526020015f2090505f73ffffffffffffffffffffffffffffffffffffffff16815f0160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081e90611f7f565b60405180910390fd5b805f0160019054906101000a900460ff1615610878576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086f90611fe7565b60405180910390fd5b6001815f0160016101000a81548160ff021916908315150217905550817f48030861b818deafd7def8853bcc8a6ec6bab746521a9546b79b8baab82dce6b60405160405180910390a25050565b6108cd611180565b5f60035f8381526020019081526020015f2090505f73ffffffffffffffffffffffffffffffffffffffff16815f0160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096990611f7f565b60405180910390fd5b6001815f015f6101000a81548160ff021916908315150217905550817f8fd81831397822207cf7571ac8b61f51ae7de628b05492a586bc63c3fd23bf8c60405160405180910390a25050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109eb611180565b5f60035f8381526020019081526020015f2090505f73ffffffffffffffffffffffffffffffffffffffff16815f0160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8790611f7f565b60405180910390fd5b805f0160019054906101000a900460ff16610ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad79061204f565b60405180910390fd5b5f815f0160016101000a81548160ff021916908315150217905550817ff12d3e50d9ed05d035c02b9f29e1da20004bce112d4fbe2cc0f0ba272ee5d97760405160405180910390a25050565b60018054610b3990611c9f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6590611c9f565b8015610bb05780601f10610b8757610100808354040283529160200191610bb0565b820191905f5260205f20905b815481529060010190602001808311610b9357829003601f168201915b505050505081565b610bc0611180565b610bc95f611207565b565b6003602052805f5260405f205f91509050805f015f9054906101000a900460ff1690805f0160019054906101000a900460ff1690805f0160029054906101000a900460ff1690805f0160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154905086565b5f5f60035f8581526020019081526020015f209050805f015f9054906101000a900460ff16610cc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc0906120b7565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16815f0160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d519061211f565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff16816001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de290612187565b60405180910390fd5b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610e49939291906121a5565b6020604051808303815f875af1158015610e65573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e899190612204565b610ec8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebf90612279565b60405180910390fd5b5f84338360020160025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610efd90611371565b610f0a9493929190612397565b604051809103905ff080158015610f23573d5f5f3e3d5ffd5b50905080826001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848173ffffffffffffffffffffffffffffffffffffffff167f1bd63527042f119292b792487cee2f3e2f788737aa8ce9c0b5e79a2e17bd6bab60405160405180910390a3809250505092915050565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610fe6611180565b606481111561102a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110219061242b565b60405180910390fd5b80600581905550807f46874eadb9fbed6216cc291db88479d85276a57dbb14919a9ed5849652dd031560405160405180910390a250565b6004602052805f5260405f205f91509050805461107d90611c9f565b80601f01602080910402602001604051908101604052809291908181526020018280546110a990611c9f565b80156110f45780601f106110cb576101008083540402835291602001916110f4565b820191905f5260205f20905b8154815290600101906020018083116110d757829003601f168201915b505050505081565b611104611180565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611174575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161116b9190611a29565b60405180910390fd5b61117d81611207565b50565b6111886112c8565b73ffffffffffffffffffffffffffffffffffffffff166111a6610fb7565b73ffffffffffffffffffffffffffffffffffffffff1614611205576111c96112c8565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016111fc9190611a29565b60405180910390fd5b565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b828054828255905f5260205f20908101928215611309579160200282015b828111156113085782518255916020019190600101906112ed565b5b509050611316919061137e565b5090565b828054828255905f5260205f20908101928215611360579160200282015b8281111561135f57825182908161134f9190611e66565b5091602001919060010190611338565b5b50905061136d9190611399565b5090565b6122e78061244a83390190565b5b80821115611395575f815f90555060010161137f565b5090565b5b808211156113b8575f81816113af91906113bc565b5060010161139a565b5090565b5080546113c890611c9f565b5f825580601f106113d957506113f6565b601f0160209004905f5260205f20908101906113f5919061137e565b5b50565b5f604051905090565b5f5ffd5b5f5ffd5b5f819050919050565b61141c8161140a565b8114611426575f5ffd5b50565b5f8135905061143781611413565b92915050565b5f6020828403121561145257611451611402565b5b5f61145f84828501611429565b91505092915050565b5f8115159050919050565b61147c81611468565b82525050565b5f6020820190506114955f830184611473565b92915050565b6114a48161140a565b82525050565b5f6020820190506114bd5f83018461149b565b92915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61150d826114c7565b810181811067ffffffffffffffff8211171561152c5761152b6114d7565b5b80604052505050565b5f61153e6113f9565b905061154a8282611504565b919050565b5f67ffffffffffffffff821115611569576115686114d7565b5b602082029050602081019050919050565b5f5ffd5b5f5ffd5b5f67ffffffffffffffff82111561159c5761159b6114d7565b5b6115a5826114c7565b9050602081019050919050565b828183375f83830152505050565b5f6115d26115cd84611582565b611535565b9050828152602081018484840111156115ee576115ed61157e565b5b6115f98482856115b2565b509392505050565b5f82601f830112611615576116146114c3565b5b81356116258482602086016115c0565b91505092915050565b5f61164061163b8461154f565b611535565b905080838252602082019050602084028301858111156116635761166261157a565b5b835b818110156116aa57803567ffffffffffffffff811115611688576116876114c3565b5b8086016116958982611601565b85526020850194505050602081019050611665565b5050509392505050565b5f82601f8301126116c8576116c76114c3565b5b81356116d884826020860161162e565b91505092915050565b5f67ffffffffffffffff8211156116fb576116fa6114d7565b5b602082029050602081019050919050565b5f61171e611719846116e1565b611535565b905080838252602082019050602084028301858111156117415761174061157a565b5b835b8181101561176a57806117568882611429565b845260208401935050602081019050611743565b5050509392505050565b5f82601f830112611788576117876114c3565b5b813561179884826020860161170c565b91505092915050565b5f5f5f5f608085870312156117b9576117b8611402565b5b5f6117c687828801611429565b945050602085013567ffffffffffffffff8111156117e7576117e6611406565b5b6117f3878288016116b4565b935050604085013567ffffffffffffffff81111561181457611813611406565b5b611820878288016116b4565b925050606085013567ffffffffffffffff81111561184157611840611406565b5b61184d87828801611774565b91505092959194509250565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f61189b61189661189184611859565b611878565b611859565b9050919050565b5f6118ac82611881565b9050919050565b5f6118bd826118a2565b9050919050565b6118cd816118b3565b82525050565b5f6020820190506118e65f8301846118c4565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61191e826118ec565b61192881856118f6565b9350611938818560208601611906565b611941816114c7565b840191505092915050565b5f6020820190508181035f8301526119648184611914565b905092915050565b5f61197682611859565b9050919050565b6119868161196c565b82525050565b5f60c08201905061199f5f830189611473565b6119ac6020830188611473565b6119b96040830187611473565b6119c6606083018661197d565b6119d3608083018561197d565b6119e060a083018461149b565b979650505050505050565b5f5f60408385031215611a0157611a00611402565b5b5f611a0e85828601611429565b9250506020611a1f85828601611429565b9150509250929050565b5f602082019050611a3c5f83018461197d565b92915050565b611a4b8161196c565b8114611a55575f5ffd5b50565b5f81359050611a6681611a42565b92915050565b5f60208284031215611a8157611a80611402565b5b5f611a8e84828501611a58565b91505092915050565b7f53747265616d20494420616c72656164792065786973747300000000000000005f82015250565b5f611acb6018836118f6565b9150611ad682611a97565b602082019050919050565b5f6020820190508181035f830152611af881611abf565b9050919050565b7f50726f66696c65732072657175697265640000000000000000000000000000005f82015250565b5f611b336011836118f6565b9150611b3e82611aff565b602082019050919050565b5f6020820190508181035f830152611b6081611b27565b9050919050565b7f4d69736d6174636820696e204149206d6f64656c7320616e64207265717569725f8201527f656d656e74730000000000000000000000000000000000000000000000000000602082015250565b5f611bc16026836118f6565b9150611bcc82611b67565b604082019050919050565b5f6020820190508181035f830152611bee81611bb5565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81905092915050565b5f611c36826118ec565b611c408185611c22565b9350611c50818560208601611906565b80840191505092915050565b5f611c678284611c2c565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611cb657607f821691505b602082108103611cc957611cc8611c72565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302611d2b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611cf0565b611d358683611cf0565b95508019841693508086168417925050509392505050565b5f611d67611d62611d5d8461140a565b611878565b61140a565b9050919050565b5f819050919050565b611d8083611d4d565b611d94611d8c82611d6e565b848454611cfc565b825550505050565b5f5f905090565b611dab611d9c565b611db6818484611d77565b505050565b5b81811015611dd957611dce5f82611da3565b600181019050611dbc565b5050565b601f821115611e1e57611def81611ccf565b611df884611ce1565b81016020851015611e07578190505b611e1b611e1385611ce1565b830182611dbb565b50505b505050565b5f82821c905092915050565b5f611e3e5f1984600802611e23565b1980831691505092915050565b5f611e568383611e2f565b9150826002028217905092915050565b611e6f826118ec565b67ffffffffffffffff811115611e8857611e876114d7565b5b611e928254611c9f565b611e9d828285611ddd565b5f60209050601f831160018114611ece575f8415611ebc578287015190505b611ec68582611e4b565b865550611f2d565b601f198416611edc86611ccf565b5f5b82811015611f0357848901518255600182019150602085019450602081019050611ede565b86831015611f205784890151611f1c601f891682611e2f565b8355505b6001600288020188555050505b505050505050565b7f53747265616d206e6f7420666f756e64000000000000000000000000000000005f82015250565b5f611f696010836118f6565b9150611f7482611f35565b602082019050919050565b5f6020820190508181035f830152611f9681611f5d565b9050919050565b7f526566756e6420616c726561647920616c6c6f776564000000000000000000005f82015250565b5f611fd16016836118f6565b9150611fdc82611f9d565b602082019050919050565b5f6020820190508181035f830152611ffe81611fc5565b9050919050565b7f526566756e64206e6f7420616c6c6f77656400000000000000000000000000005f82015250565b5f6120396012836118f6565b915061204482612005565b602082019050919050565b5f6020820190508181035f8301526120668161202d565b9050919050565b7f53747265616d206e6f7420617070726f766564000000000000000000000000005f82015250565b5f6120a16013836118f6565b91506120ac8261206d565b602082019050919050565b5f6020820190508181035f8301526120ce81612095565b9050919050565b7f4f6e6c7920636c69656e742063616e20637265617465000000000000000000005f82015250565b5f6121096016836118f6565b9150612114826120d5565b602082019050919050565b5f6020820190508181035f830152612136816120fd565b9050919050565b7f53747265616d20616c72656164792063726561746564000000000000000000005f82015250565b5f6121716016836118f6565b915061217c8261213d565b602082019050919050565b5f6020820190508181035f83015261219e81612165565b9050919050565b5f6060820190506121b85f83018661197d565b6121c5602083018561197d565b6121d2604083018461149b565b949350505050565b6121e381611468565b81146121ed575f5ffd5b50565b5f815190506121fe816121da565b92915050565b5f6020828403121561221957612218611402565b5b5f612226848285016121f0565b91505092915050565b7f546f6b656e207472616e73666572206661696c656400000000000000000000005f82015250565b5f6122636015836118f6565b915061226e8261222f565b602082019050919050565b5f6020820190508181035f83015261229081612257565b9050919050565b5f81549050919050565b5f82825260208201905092915050565b5f819050815f5260205f209050919050565b6122cc8161140a565b82525050565b5f6122dd83836122c3565b60208301905092915050565b5f815f1c9050919050565b5f819050919050565b5f61230f61230a836122e9565b6122f4565b9050919050565b5f61232182546122fd565b9050919050565b5f600182019050919050565b5f61233e82612297565b61234881856122a1565b9350612353836122b1565b805f5b8381101561238a5761236782612316565b61237188826122d2565b975061237c83612328565b925050600181019050612356565b5085935050505092915050565b5f6080820190506123aa5f83018761149b565b6123b7602083018661197d565b81810360408301526123c98185612334565b90506123d860608301846118c4565b95945050505050565b7f50657263656e74206d757374206265203c3d20313030000000000000000000005f82015250565b5f6124156016836118f6565b9150612420826123e1565b602082019050919050565b5f6020820190508181035f83015261244281612409565b905091905056fe608060405234801561000f575f5ffd5b506040516122e73803806122e783398181016040528101906100319190610499565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361009f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009690610573565b60405180910390fd5b836001819055508260025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550335f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816008908051906020019061017b92919061020a565b505f5f90505b600880549050811015610200575f600882815481106101a3576101a2610591565b5b905f5260205f2001549050600160075f8381526020019081526020015f205f015f6101000a81548160ff0219169083151502179055508160075f8381526020019081526020015f2060010181905550508080600101915050610181565b50505050506105be565b828054828255905f5260205f20908101928215610244579160200282015b82811115610243578251825591602001919060010190610228565b5b5090506102519190610255565b5090565b5b8082111561026c575f815f905550600101610256565b5090565b5f604051905090565b5f5ffd5b5f5ffd5b5f819050919050565b61029381610281565b811461029d575f5ffd5b50565b5f815190506102ae8161028a565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102dd826102b4565b9050919050565b6102ed816102d3565b81146102f7575f5ffd5b50565b5f81519050610308816102e4565b92915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61035882610312565b810181811067ffffffffffffffff8211171561037757610376610322565b5b80604052505050565b5f610389610270565b9050610395828261034f565b919050565b5f67ffffffffffffffff8211156103b4576103b3610322565b5b602082029050602081019050919050565b5f5ffd5b5f6103db6103d68461039a565b610380565b905080838252602082019050602084028301858111156103fe576103fd6103c5565b5b835b81811015610427578061041388826102a0565b845260208401935050602081019050610400565b5050509392505050565b5f82601f8301126104455761044461030e565b5b81516104558482602086016103c9565b91505092915050565b5f610468826102d3565b9050919050565b6104788161045e565b8114610482575f5ffd5b50565b5f815190506104938161046f565b92915050565b5f5f5f5f608085870312156104b1576104b0610279565b5b5f6104be878288016102a0565b94505060206104cf878288016102fa565b935050604085015167ffffffffffffffff8111156104f0576104ef61027d565b5b6104fc87828801610431565b925050606061050d87828801610485565b91505092959194509250565b5f82825260208201905092915050565b7f496e76616c696420636c69656e742061646472657373000000000000000000005f82015250565b5f61055d601683610519565b915061056882610529565b602082019050919050565b5f6020820190508181035f83015261058a81610551565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b611d1c806105cb5f395ff3fe608060405234801561000f575f5ffd5b50600436106100f3575f3560e01c8063747f758911610095578063c5d0b14c11610064578063c5d0b14c1461024b578063d78e647f1461027d578063eda0ce1714610299578063fc1028bc146102c9576100f3565b8063747f7589146101eb578063af640d0f14610207578063bb57a5ed14610225578063bbe58b0c1461022f576100f3565b80631f54e5bd116100d15780631f54e5bd146101635780633013ce2914610193578063356939ab146101b1578063481c6a75146101cd576100f3565b8063109e94cf146100f757806312fa6feb146101155780631bb62fc414610133575b5f5ffd5b6100ff6102e7565b60405161010c9190611268565b60405180910390f35b61011d61030c565b60405161012a919061129b565b60405180910390f35b61014d600480360381019061014891906112f8565b61031f565b60405161015a919061129b565b60405180910390f35b61017d600480360381019061017891906112f8565b61033c565b60405161018a919061129b565b60405180910390f35b61019b6103b4565b6040516101a8919061137e565b60405180910390f35b6101cb60048036038101906101c691906114e7565b6103d9565b005b6101d5610557565b6040516101e29190611268565b60405180910390f35b61020560048036038101906102009190611541565b61057b565b005b61020f6107b3565b60405161021c91906115b4565b60405180910390f35b61022d6107b9565b005b610249600480360381019061024491906115cd565b6108b4565b005b610265600480360381019061026091906112f8565b610b1e565b6040516102749392919061160b565b60405180910390f35b610297600480360381019061029291906115cd565b610b50565b005b6102b360048036038101906102ae91906115cd565b61113d565b6040516102c091906115b4565b60405180910390f35b6102d1611168565b6040516102de919061129b565b60405180910390f35b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260149054906101000a900460ff1681565b6004602052805f5260405f205f915054906101000a900460ff1681565b5f5f60075f8481526020019081526020015f209050805f015f9054906101000a900460ff166103a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103979061169a565b60405180910390fd5b600680549050816002015414915050919050565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045e90611702565b60405180910390fd5b60045f8381526020019081526020015f205f9054906101000a900460ff1615801561049f5750600260149054906101000a900460ff16155b6104de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d59061176a565b60405180910390fd5b600160045f8481526020019081526020015f205f6101000a81548160ff0219169083151502179055508060055f8481526020019081526020015f20908051906020019061052c9291906111c3565b50600682908060018154018082558091505060019003905f5260205f20015f90919091909150555050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60075f8681526020019081526020015f206003015f8581526020019081526020015f20905060045f8581526020019081526020015f205f9054906101000a900460ff16801561061957505f73ffffffffffffffffffffffffffffffffffffffff16816002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064f906117f8565b60405180910390fd5b60075f8681526020019081526020015f205f015f9054906101000a900460ff166106b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ae9061169a565b60405180910390fd5b805f0160405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200185815250908060018154018082558091505060019003905f5260205f2090600302015f909190919091505f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506001815f018054905061077e9190611843565b85857fb625ad3a7ea2d8a035a88ccb4001b583e72535a7093232080cc461ff6925917b60405160405180910390a45050505050565b60015481565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083e90611702565b60405180910390fd5b600260149054906101000a900460ff1615610897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088e906118c0565b60405180910390fd5b6001600260146101000a81548160ff021916908315150217905550565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663facd743b336040518263ffffffff1660e01b815260040161090d9190611268565b602060405180830381865afa158015610928573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061094c9190611908565b61098b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109829061197d565b60405180910390fd5b5f60075f8481526020019081526020015f206003015f8381526020019081526020015f20905060045f8381526020019081526020015f205f9054906101000a900460ff168015610a2957505f73ffffffffffffffffffffffffffffffffffffffff16816002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610a68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5f906117f8565b60405180910390fd5b805f018054905060018260010154610a80919061199b565b1115610ac1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab890611a18565b60405180910390fd5b806001015f815480929190610ad590611a36565b919050555060018160010154610aeb9190611843565b82847fb25faf3bb93b5105c8bc184c6af20f251543b1fdd93cd5c6f9f31b13c138b91a60405160405180910390a4505050565b6007602052805f5260405f205f91509050805f015f9054906101000a900460ff16908060010154908060020154905083565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663facd743b336040518263ffffffff1660e01b8152600401610ba99190611268565b602060405180830381865afa158015610bc4573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610be89190611908565b610c27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1e9061197d565b60405180910390fd5b5f60075f8481526020019081526020015f209050805f015f9054906101000a900460ff16610c8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c819061169a565b60405180910390fd5b5f816003015f8481526020019081526020015f20905060045f8481526020019081526020015f205f9054906101000a900460ff168015610d1857505f73ffffffffffffffffffffffffffffffffffffffff16816002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610d57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4e906117f8565b60405180910390fd5b805f0180549050816001015410610da3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9a90611ac7565b60405180910390fd5b5f815f01826001015481548110610dbd57610dbc611ae5565b5b905f5260205f20906003020190505f60055f8681526020019081526020015f20846001015481548110610df357610df2611ae5565b5b905f5260205f20015490505f60645f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323be9d276040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e8e9190611b26565b83610e999190611b51565b610ea39190611bbf565b90508082610eb19190611843565b915060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb845f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610f31929190611bef565b6020604051808303815f875af1158015610f4d573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f719190611908565b610fb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa790611c60565b60405180910390fd5b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161102c929190611bef565b6020604051808303815f875af1158015611048573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061106c9190611908565b6110ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a290611cc8565b60405180910390fd5b33846002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846002015f81548092919061110190611a36565b919050555085877f6e0dd2be4d72dbf12213042a47491e605ec38b66d076e6f74e9f458373080e3760405160405180910390a350505050505050565b6005602052815f5260405f208181548110611156575f80fd5b905f5260205f20015f91509150505481565b5f5f5f90505b6008805490508110156111ba576111a06008828154811061119257611191611ae5565b5b905f5260205f20015461033c565b6111ad575f9150506111c0565b808060010191505061116e565b50600190505b90565b828054828255905f5260205f209081019282156111fd579160200282015b828111156111fc5782518255916020019190600101906111e1565b5b50905061120a919061120e565b5090565b5b80821115611225575f815f90555060010161120f565b5090565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61125282611229565b9050919050565b61126281611248565b82525050565b5f60208201905061127b5f830184611259565b92915050565b5f8115159050919050565b61129581611281565b82525050565b5f6020820190506112ae5f83018461128c565b92915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f819050919050565b6112d7816112c5565b81146112e1575f5ffd5b50565b5f813590506112f2816112ce565b92915050565b5f6020828403121561130d5761130c6112bd565b5b5f61131a848285016112e4565b91505092915050565b5f819050919050565b5f61134661134161133c84611229565b611323565b611229565b9050919050565b5f6113578261132c565b9050919050565b5f6113688261134d565b9050919050565b6113788161135e565b82525050565b5f6020820190506113915f83018461136f565b92915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6113e18261139b565b810181811067ffffffffffffffff82111715611400576113ff6113ab565b5b80604052505050565b5f6114126112b4565b905061141e82826113d8565b919050565b5f67ffffffffffffffff82111561143d5761143c6113ab565b5b602082029050602081019050919050565b5f5ffd5b5f61146461145f84611423565b611409565b905080838252602082019050602084028301858111156114875761148661144e565b5b835b818110156114b0578061149c88826112e4565b845260208401935050602081019050611489565b5050509392505050565b5f82601f8301126114ce576114cd611397565b5b81356114de848260208601611452565b91505092915050565b5f5f604083850312156114fd576114fc6112bd565b5b5f61150a858286016112e4565b925050602083013567ffffffffffffffff81111561152b5761152a6112c1565b5b611537858286016114ba565b9150509250929050565b5f5f5f5f60808587031215611559576115586112bd565b5b5f611566878288016112e4565b9450506020611577878288016112e4565b9350506040611588878288016112e4565b9250506060611599878288016112e4565b91505092959194509250565b6115ae816112c5565b82525050565b5f6020820190506115c75f8301846115a5565b92915050565b5f5f604083850312156115e3576115e26112bd565b5b5f6115f0858286016112e4565b9250506020611601858286016112e4565b9150509250929050565b5f60608201905061161e5f83018661128c565b61162b60208301856115a5565b61163860408301846115a5565b949350505050565b5f82825260208201905092915050565b7f50726f66696c65206e6f742072657175697265640000000000000000000000005f82015250565b5f611684601483611640565b915061168f82611650565b602082019050919050565b5f6020820190508181035f8301526116b181611678565b9050919050565b7f4e6f742061206d616e61676572000000000000000000000000000000000000005f82015250565b5f6116ec600d83611640565b91506116f7826116b8565b602082019050919050565b5f6020820190508181035f830152611719816116e0565b9050919050565b7f496e76616c6964206368756e6b206f722073747265616d20656e6465640000005f82015250565b5f611754601d83611640565b915061175f82611720565b602082019050919050565b5f6020820190508181035f83015261178181611748565b9050919050565b7f496e76616c6964206368756e6b206f7220616c72656164792076616c696461745f8201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b5f6117e2602283611640565b91506117ed82611788565b604082019050919050565b5f6020820190508181035f83015261180f816117d6565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61184d826112c5565b9150611858836112c5565b92508282039050818111156118705761186f611816565b5b92915050565b7f53747265616d20616c726561647920656e6465640000000000000000000000005f82015250565b5f6118aa601483611640565b91506118b582611876565b602082019050919050565b5f6020820190508181035f8301526118d78161189e565b9050919050565b6118e781611281565b81146118f1575f5ffd5b50565b5f81519050611902816118de565b92915050565b5f6020828403121561191d5761191c6112bd565b5b5f61192a848285016118f4565b91505092915050565b7f4e6f7420612076616c696461746f7200000000000000000000000000000000005f82015250565b5f611967600f83611640565b915061197282611933565b602082019050919050565b5f6020820190508181035f8301526119948161195b565b9050919050565b5f6119a5826112c5565b91506119b0836112c5565b92508282019050808211156119c8576119c7611816565b5b92915050565b7f4e6f2070726f6f667320746f20736372617000000000000000000000000000005f82015250565b5f611a02601283611640565b9150611a0d826119ce565b602082019050919050565b5f6020820190508181035f830152611a2f816119f6565b9050919050565b5f611a40826112c5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a7257611a71611816565b5b600182019050919050565b7f4e6f2070726f6f667320617661696c61626c65000000000000000000000000005f82015250565b5f611ab1601383611640565b9150611abc82611a7d565b602082019050919050565b5f6020820190508181035f830152611ade81611aa5565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f81519050611b20816112ce565b92915050565b5f60208284031215611b3b57611b3a6112bd565b5b5f611b4884828501611b12565b91505092915050565b5f611b5b826112c5565b9150611b66836112c5565b9250828202611b74816112c5565b91508282048414831517611b8b57611b8a611816565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f611bc9826112c5565b9150611bd4836112c5565b925082611be457611be3611b92565b5b828204905092915050565b5f604082019050611c025f830185611259565b611c0f60208301846115a5565b9392505050565b7f4d696e6572207061796d656e74206661696c65640000000000000000000000005f82015250565b5f611c4a601483611640565b9150611c5582611c16565b602082019050919050565b5f6020820190508181035f830152611c7781611c3e565b9050919050565b7f5365727669636520666565207061796d656e74206661696c65640000000000005f82015250565b5f611cb2601a83611640565b9150611cbd82611c7e565b602082019050919050565b5f6020820190508181035f830152611cdf81611ca6565b905091905056fea2646970667358221220dda308ed18d851b2cca7106c293394b8a99e427a0b04854f4c7a53cd5238516a64736f6c634300081c0033a2646970667358221220865547b57d814bd1c0e0becd79c8d5842f93efd9193951e25698f74829feb63464736f6c634300081c0033",
}

// StreamManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use StreamManagerMetaData.ABI instead.
var StreamManagerABI = StreamManagerMetaData.ABI

// StreamManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StreamManagerMetaData.Bin instead.
var StreamManagerBin = StreamManagerMetaData.Bin

// DeployStreamManager deploys a new Ethereum contract, binding an instance of StreamManager to it.
func DeployStreamManager(auth *bind.TransactOpts, backend bind.ContractBackend, _paymentToken common.Address) (common.Address, *types.Transaction, *StreamManager, error) {
	parsed, err := StreamManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StreamManagerBin), backend, _paymentToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StreamManager{StreamManagerCaller: StreamManagerCaller{contract: contract}, StreamManagerTransactor: StreamManagerTransactor{contract: contract}, StreamManagerFilterer: StreamManagerFilterer{contract: contract}}, nil
}

// StreamManager is an auto generated Go binding around an Ethereum contract.
type StreamManager struct {
	StreamManagerCaller     // Read-only binding to the contract
	StreamManagerTransactor // Write-only binding to the contract
	StreamManagerFilterer   // Log filterer for contract events
}

// StreamManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type StreamManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StreamManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StreamManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StreamManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StreamManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StreamManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StreamManagerSession struct {
	Contract     *StreamManager    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StreamManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StreamManagerCallerSession struct {
	Contract *StreamManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// StreamManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StreamManagerTransactorSession struct {
	Contract     *StreamManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// StreamManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type StreamManagerRaw struct {
	Contract *StreamManager // Generic contract binding to access the raw methods on
}

// StreamManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StreamManagerCallerRaw struct {
	Contract *StreamManagerCaller // Generic read-only contract binding to access the raw methods on
}

// StreamManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StreamManagerTransactorRaw struct {
	Contract *StreamManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStreamManager creates a new instance of StreamManager, bound to a specific deployed contract.
func NewStreamManager(address common.Address, backend bind.ContractBackend) (*StreamManager, error) {
	contract, err := bindStreamManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StreamManager{StreamManagerCaller: StreamManagerCaller{contract: contract}, StreamManagerTransactor: StreamManagerTransactor{contract: contract}, StreamManagerFilterer: StreamManagerFilterer{contract: contract}}, nil
}

// NewStreamManagerCaller creates a new read-only instance of StreamManager, bound to a specific deployed contract.
func NewStreamManagerCaller(address common.Address, caller bind.ContractCaller) (*StreamManagerCaller, error) {
	contract, err := bindStreamManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StreamManagerCaller{contract: contract}, nil
}

// NewStreamManagerTransactor creates a new write-only instance of StreamManager, bound to a specific deployed contract.
func NewStreamManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*StreamManagerTransactor, error) {
	contract, err := bindStreamManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StreamManagerTransactor{contract: contract}, nil
}

// NewStreamManagerFilterer creates a new log filterer instance of StreamManager, bound to a specific deployed contract.
func NewStreamManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*StreamManagerFilterer, error) {
	contract, err := bindStreamManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StreamManagerFilterer{contract: contract}, nil
}

// bindStreamManager binds a generic wrapper to an already deployed contract.
func bindStreamManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StreamManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StreamManager *StreamManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StreamManager.Contract.StreamManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StreamManager *StreamManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StreamManager.Contract.StreamManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StreamManager *StreamManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StreamManager.Contract.StreamManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StreamManager *StreamManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StreamManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StreamManager *StreamManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StreamManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StreamManager *StreamManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StreamManager.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StreamManager *StreamManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StreamManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StreamManager *StreamManagerSession) Owner() (common.Address, error) {
	return _StreamManager.Contract.Owner(&_StreamManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StreamManager *StreamManagerCallerSession) Owner() (common.Address, error) {
	return _StreamManager.Contract.Owner(&_StreamManager.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_StreamManager *StreamManagerCaller) PaymentToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StreamManager.contract.Call(opts, &out, "paymentToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_StreamManager *StreamManagerSession) PaymentToken() (common.Address, error) {
	return _StreamManager.Contract.PaymentToken(&_StreamManager.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_StreamManager *StreamManagerCallerSession) PaymentToken() (common.Address, error) {
	return _StreamManager.Contract.PaymentToken(&_StreamManager.CallOpts)
}

// Profiles is a free data retrieval call binding the contract method 0xc36fe3d6.
//
// Solidity: function profiles(uint256 ) view returns(string)
func (_StreamManager *StreamManagerCaller) Profiles(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _StreamManager.contract.Call(opts, &out, "profiles", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Profiles is a free data retrieval call binding the contract method 0xc36fe3d6.
//
// Solidity: function profiles(uint256 ) view returns(string)
func (_StreamManager *StreamManagerSession) Profiles(arg0 *big.Int) (string, error) {
	return _StreamManager.Contract.Profiles(&_StreamManager.CallOpts, arg0)
}

// Profiles is a free data retrieval call binding the contract method 0xc36fe3d6.
//
// Solidity: function profiles(uint256 ) view returns(string)
func (_StreamManager *StreamManagerCallerSession) Profiles(arg0 *big.Int) (string, error) {
	return _StreamManager.Contract.Profiles(&_StreamManager.CallOpts, arg0)
}

// RefundAllowed is a free data retrieval call binding the contract method 0x0f514717.
//
// Solidity: function refundAllowed(uint256 streamId) view returns(bool)
func (_StreamManager *StreamManagerCaller) RefundAllowed(opts *bind.CallOpts, streamId *big.Int) (bool, error) {
	var out []interface{}
	err := _StreamManager.contract.Call(opts, &out, "refundAllowed", streamId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RefundAllowed is a free data retrieval call binding the contract method 0x0f514717.
//
// Solidity: function refundAllowed(uint256 streamId) view returns(bool)
func (_StreamManager *StreamManagerSession) RefundAllowed(streamId *big.Int) (bool, error) {
	return _StreamManager.Contract.RefundAllowed(&_StreamManager.CallOpts, streamId)
}

// RefundAllowed is a free data retrieval call binding the contract method 0x0f514717.
//
// Solidity: function refundAllowed(uint256 streamId) view returns(bool)
func (_StreamManager *StreamManagerCallerSession) RefundAllowed(streamId *big.Int) (bool, error) {
	return _StreamManager.Contract.RefundAllowed(&_StreamManager.CallOpts, streamId)
}

// Requests is a free data retrieval call binding the contract method 0x81d12c58.
//
// Solidity: function requests(uint256 ) view returns(bool approved, bool refund, bool ended, address client, address stream, uint256 streamId)
func (_StreamManager *StreamManagerCaller) Requests(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Approved bool
	Refund   bool
	Ended    bool
	Client   common.Address
	Stream   common.Address
	StreamId *big.Int
}, error) {
	var out []interface{}
	err := _StreamManager.contract.Call(opts, &out, "requests", arg0)

	outstruct := new(struct {
		Approved bool
		Refund   bool
		Ended    bool
		Client   common.Address
		Stream   common.Address
		StreamId *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Approved = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Refund = *abi.ConvertType(out[1], new(bool)).(*bool)
	outstruct.Ended = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.Client = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.Stream = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.StreamId = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Requests is a free data retrieval call binding the contract method 0x81d12c58.
//
// Solidity: function requests(uint256 ) view returns(bool approved, bool refund, bool ended, address client, address stream, uint256 streamId)
func (_StreamManager *StreamManagerSession) Requests(arg0 *big.Int) (struct {
	Approved bool
	Refund   bool
	Ended    bool
	Client   common.Address
	Stream   common.Address
	StreamId *big.Int
}, error) {
	return _StreamManager.Contract.Requests(&_StreamManager.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x81d12c58.
//
// Solidity: function requests(uint256 ) view returns(bool approved, bool refund, bool ended, address client, address stream, uint256 streamId)
func (_StreamManager *StreamManagerCallerSession) Requests(arg0 *big.Int) (struct {
	Approved bool
	Refund   bool
	Ended    bool
	Client   common.Address
	Stream   common.Address
	StreamId *big.Int
}, error) {
	return _StreamManager.Contract.Requests(&_StreamManager.CallOpts, arg0)
}

// ServiceSharePercent is a free data retrieval call binding the contract method 0x13186d0e.
//
// Solidity: function serviceSharePercent() view returns(uint256)
func (_StreamManager *StreamManagerCaller) ServiceSharePercent(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StreamManager.contract.Call(opts, &out, "serviceSharePercent")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ServiceSharePercent is a free data retrieval call binding the contract method 0x13186d0e.
//
// Solidity: function serviceSharePercent() view returns(uint256)
func (_StreamManager *StreamManagerSession) ServiceSharePercent() (*big.Int, error) {
	return _StreamManager.Contract.ServiceSharePercent(&_StreamManager.CallOpts)
}

// ServiceSharePercent is a free data retrieval call binding the contract method 0x13186d0e.
//
// Solidity: function serviceSharePercent() view returns(uint256)
func (_StreamManager *StreamManagerCallerSession) ServiceSharePercent() (*big.Int, error) {
	return _StreamManager.Contract.ServiceSharePercent(&_StreamManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_StreamManager *StreamManagerCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StreamManager.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_StreamManager *StreamManagerSession) Version() (string, error) {
	return _StreamManager.Contract.Version(&_StreamManager.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_StreamManager *StreamManagerCallerSession) Version() (string, error) {
	return _StreamManager.Contract.Version(&_StreamManager.CallOpts)
}

// AllowRefund is a paid mutator transaction binding the contract method 0x225f6541.
//
// Solidity: function allowRefund(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactor) AllowRefund(opts *bind.TransactOpts, streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "allowRefund", streamId)
}

// AllowRefund is a paid mutator transaction binding the contract method 0x225f6541.
//
// Solidity: function allowRefund(uint256 streamId) returns()
func (_StreamManager *StreamManagerSession) AllowRefund(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.AllowRefund(&_StreamManager.TransactOpts, streamId)
}

// AllowRefund is a paid mutator transaction binding the contract method 0x225f6541.
//
// Solidity: function allowRefund(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactorSession) AllowRefund(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.AllowRefund(&_StreamManager.TransactOpts, streamId)
}

// ApproveStream is a paid mutator transaction binding the contract method 0x240dc686.
//
// Solidity: function approveStream(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactor) ApproveStream(opts *bind.TransactOpts, streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "approveStream", streamId)
}

// ApproveStream is a paid mutator transaction binding the contract method 0x240dc686.
//
// Solidity: function approveStream(uint256 streamId) returns()
func (_StreamManager *StreamManagerSession) ApproveStream(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.ApproveStream(&_StreamManager.TransactOpts, streamId)
}

// ApproveStream is a paid mutator transaction binding the contract method 0x240dc686.
//
// Solidity: function approveStream(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactorSession) ApproveStream(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.ApproveStream(&_StreamManager.TransactOpts, streamId)
}

// CreateStream is a paid mutator transaction binding the contract method 0x8d40bd03.
//
// Solidity: function createStream(uint256 streamId, uint256 depositAmount) returns(address)
func (_StreamManager *StreamManagerTransactor) CreateStream(opts *bind.TransactOpts, streamId *big.Int, depositAmount *big.Int) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "createStream", streamId, depositAmount)
}

// CreateStream is a paid mutator transaction binding the contract method 0x8d40bd03.
//
// Solidity: function createStream(uint256 streamId, uint256 depositAmount) returns(address)
func (_StreamManager *StreamManagerSession) CreateStream(streamId *big.Int, depositAmount *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.CreateStream(&_StreamManager.TransactOpts, streamId, depositAmount)
}

// CreateStream is a paid mutator transaction binding the contract method 0x8d40bd03.
//
// Solidity: function createStream(uint256 streamId, uint256 depositAmount) returns(address)
func (_StreamManager *StreamManagerTransactorSession) CreateStream(streamId *big.Int, depositAmount *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.CreateStream(&_StreamManager.TransactOpts, streamId, depositAmount)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StreamManager *StreamManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StreamManager *StreamManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _StreamManager.Contract.RenounceOwnership(&_StreamManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StreamManager *StreamManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _StreamManager.Contract.RenounceOwnership(&_StreamManager.TransactOpts)
}

// RequestStream is a paid mutator transaction binding the contract method 0x1e3e868b.
//
// Solidity: function requestStream(uint256 streamId, string[] profileNames, string[] aiModels, uint256[] computeRequirements) returns(uint256)
func (_StreamManager *StreamManagerTransactor) RequestStream(opts *bind.TransactOpts, streamId *big.Int, profileNames []string, aiModels []string, computeRequirements []*big.Int) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "requestStream", streamId, profileNames, aiModels, computeRequirements)
}

// RequestStream is a paid mutator transaction binding the contract method 0x1e3e868b.
//
// Solidity: function requestStream(uint256 streamId, string[] profileNames, string[] aiModels, uint256[] computeRequirements) returns(uint256)
func (_StreamManager *StreamManagerSession) RequestStream(streamId *big.Int, profileNames []string, aiModels []string, computeRequirements []*big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.RequestStream(&_StreamManager.TransactOpts, streamId, profileNames, aiModels, computeRequirements)
}

// RequestStream is a paid mutator transaction binding the contract method 0x1e3e868b.
//
// Solidity: function requestStream(uint256 streamId, string[] profileNames, string[] aiModels, uint256[] computeRequirements) returns(uint256)
func (_StreamManager *StreamManagerTransactorSession) RequestStream(streamId *big.Int, profileNames []string, aiModels []string, computeRequirements []*big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.RequestStream(&_StreamManager.TransactOpts, streamId, profileNames, aiModels, computeRequirements)
}

// RevokeRefund is a paid mutator transaction binding the contract method 0x4b51438c.
//
// Solidity: function revokeRefund(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactor) RevokeRefund(opts *bind.TransactOpts, streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "revokeRefund", streamId)
}

// RevokeRefund is a paid mutator transaction binding the contract method 0x4b51438c.
//
// Solidity: function revokeRefund(uint256 streamId) returns()
func (_StreamManager *StreamManagerSession) RevokeRefund(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.RevokeRefund(&_StreamManager.TransactOpts, streamId)
}

// RevokeRefund is a paid mutator transaction binding the contract method 0x4b51438c.
//
// Solidity: function revokeRefund(uint256 streamId) returns()
func (_StreamManager *StreamManagerTransactorSession) RevokeRefund(streamId *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.RevokeRefund(&_StreamManager.TransactOpts, streamId)
}

// SetServiceSharePercent is a paid mutator transaction binding the contract method 0x9c15618d.
//
// Solidity: function setServiceSharePercent(uint256 percent) returns()
func (_StreamManager *StreamManagerTransactor) SetServiceSharePercent(opts *bind.TransactOpts, percent *big.Int) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "setServiceSharePercent", percent)
}

// SetServiceSharePercent is a paid mutator transaction binding the contract method 0x9c15618d.
//
// Solidity: function setServiceSharePercent(uint256 percent) returns()
func (_StreamManager *StreamManagerSession) SetServiceSharePercent(percent *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.SetServiceSharePercent(&_StreamManager.TransactOpts, percent)
}

// SetServiceSharePercent is a paid mutator transaction binding the contract method 0x9c15618d.
//
// Solidity: function setServiceSharePercent(uint256 percent) returns()
func (_StreamManager *StreamManagerTransactorSession) SetServiceSharePercent(percent *big.Int) (*types.Transaction, error) {
	return _StreamManager.Contract.SetServiceSharePercent(&_StreamManager.TransactOpts, percent)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StreamManager *StreamManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _StreamManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StreamManager *StreamManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StreamManager.Contract.TransferOwnership(&_StreamManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StreamManager *StreamManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StreamManager.Contract.TransferOwnership(&_StreamManager.TransactOpts, newOwner)
}

// StreamManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the StreamManager contract.
type StreamManagerOwnershipTransferredIterator struct {
	Event *StreamManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerOwnershipTransferred represents a OwnershipTransferred event raised by the StreamManager contract.
type StreamManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StreamManager *StreamManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StreamManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerOwnershipTransferredIterator{contract: _StreamManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StreamManager *StreamManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StreamManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerOwnershipTransferred)
				if err := _StreamManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StreamManager *StreamManagerFilterer) ParseOwnershipTransferred(log types.Log) (*StreamManagerOwnershipTransferred, error) {
	event := new(StreamManagerOwnershipTransferred)
	if err := _StreamManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StreamManagerRefundAllowedIterator is returned from FilterRefundAllowed and is used to iterate over the raw logs and unpacked data for RefundAllowed events raised by the StreamManager contract.
type StreamManagerRefundAllowedIterator struct {
	Event *StreamManagerRefundAllowed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerRefundAllowedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerRefundAllowed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerRefundAllowed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerRefundAllowedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerRefundAllowedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerRefundAllowed represents a RefundAllowed event raised by the StreamManager contract.
type StreamManagerRefundAllowed struct {
	StreamId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRefundAllowed is a free log retrieval operation binding the contract event 0x48030861b818deafd7def8853bcc8a6ec6bab746521a9546b79b8baab82dce6b.
//
// Solidity: event RefundAllowed(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) FilterRefundAllowed(opts *bind.FilterOpts, streamId []*big.Int) (*StreamManagerRefundAllowedIterator, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "RefundAllowed", streamIdRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerRefundAllowedIterator{contract: _StreamManager.contract, event: "RefundAllowed", logs: logs, sub: sub}, nil
}

// WatchRefundAllowed is a free log subscription operation binding the contract event 0x48030861b818deafd7def8853bcc8a6ec6bab746521a9546b79b8baab82dce6b.
//
// Solidity: event RefundAllowed(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) WatchRefundAllowed(opts *bind.WatchOpts, sink chan<- *StreamManagerRefundAllowed, streamId []*big.Int) (event.Subscription, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "RefundAllowed", streamIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerRefundAllowed)
				if err := _StreamManager.contract.UnpackLog(event, "RefundAllowed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundAllowed is a log parse operation binding the contract event 0x48030861b818deafd7def8853bcc8a6ec6bab746521a9546b79b8baab82dce6b.
//
// Solidity: event RefundAllowed(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) ParseRefundAllowed(log types.Log) (*StreamManagerRefundAllowed, error) {
	event := new(StreamManagerRefundAllowed)
	if err := _StreamManager.contract.UnpackLog(event, "RefundAllowed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StreamManagerRefundRevokedIterator is returned from FilterRefundRevoked and is used to iterate over the raw logs and unpacked data for RefundRevoked events raised by the StreamManager contract.
type StreamManagerRefundRevokedIterator struct {
	Event *StreamManagerRefundRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerRefundRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerRefundRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerRefundRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerRefundRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerRefundRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerRefundRevoked represents a RefundRevoked event raised by the StreamManager contract.
type StreamManagerRefundRevoked struct {
	StreamId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRefundRevoked is a free log retrieval operation binding the contract event 0xf12d3e50d9ed05d035c02b9f29e1da20004bce112d4fbe2cc0f0ba272ee5d977.
//
// Solidity: event RefundRevoked(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) FilterRefundRevoked(opts *bind.FilterOpts, streamId []*big.Int) (*StreamManagerRefundRevokedIterator, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "RefundRevoked", streamIdRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerRefundRevokedIterator{contract: _StreamManager.contract, event: "RefundRevoked", logs: logs, sub: sub}, nil
}

// WatchRefundRevoked is a free log subscription operation binding the contract event 0xf12d3e50d9ed05d035c02b9f29e1da20004bce112d4fbe2cc0f0ba272ee5d977.
//
// Solidity: event RefundRevoked(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) WatchRefundRevoked(opts *bind.WatchOpts, sink chan<- *StreamManagerRefundRevoked, streamId []*big.Int) (event.Subscription, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "RefundRevoked", streamIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerRefundRevoked)
				if err := _StreamManager.contract.UnpackLog(event, "RefundRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundRevoked is a log parse operation binding the contract event 0xf12d3e50d9ed05d035c02b9f29e1da20004bce112d4fbe2cc0f0ba272ee5d977.
//
// Solidity: event RefundRevoked(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) ParseRefundRevoked(log types.Log) (*StreamManagerRefundRevoked, error) {
	event := new(StreamManagerRefundRevoked)
	if err := _StreamManager.contract.UnpackLog(event, "RefundRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StreamManagerServiceSharePercentUpdatedIterator is returned from FilterServiceSharePercentUpdated and is used to iterate over the raw logs and unpacked data for ServiceSharePercentUpdated events raised by the StreamManager contract.
type StreamManagerServiceSharePercentUpdatedIterator struct {
	Event *StreamManagerServiceSharePercentUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerServiceSharePercentUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerServiceSharePercentUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerServiceSharePercentUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerServiceSharePercentUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerServiceSharePercentUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerServiceSharePercentUpdated represents a ServiceSharePercentUpdated event raised by the StreamManager contract.
type StreamManagerServiceSharePercentUpdated struct {
	Percent *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterServiceSharePercentUpdated is a free log retrieval operation binding the contract event 0x46874eadb9fbed6216cc291db88479d85276a57dbb14919a9ed5849652dd0315.
//
// Solidity: event ServiceSharePercentUpdated(uint256 indexed percent)
func (_StreamManager *StreamManagerFilterer) FilterServiceSharePercentUpdated(opts *bind.FilterOpts, percent []*big.Int) (*StreamManagerServiceSharePercentUpdatedIterator, error) {

	var percentRule []interface{}
	for _, percentItem := range percent {
		percentRule = append(percentRule, percentItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "ServiceSharePercentUpdated", percentRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerServiceSharePercentUpdatedIterator{contract: _StreamManager.contract, event: "ServiceSharePercentUpdated", logs: logs, sub: sub}, nil
}

// WatchServiceSharePercentUpdated is a free log subscription operation binding the contract event 0x46874eadb9fbed6216cc291db88479d85276a57dbb14919a9ed5849652dd0315.
//
// Solidity: event ServiceSharePercentUpdated(uint256 indexed percent)
func (_StreamManager *StreamManagerFilterer) WatchServiceSharePercentUpdated(opts *bind.WatchOpts, sink chan<- *StreamManagerServiceSharePercentUpdated, percent []*big.Int) (event.Subscription, error) {

	var percentRule []interface{}
	for _, percentItem := range percent {
		percentRule = append(percentRule, percentItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "ServiceSharePercentUpdated", percentRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerServiceSharePercentUpdated)
				if err := _StreamManager.contract.UnpackLog(event, "ServiceSharePercentUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseServiceSharePercentUpdated is a log parse operation binding the contract event 0x46874eadb9fbed6216cc291db88479d85276a57dbb14919a9ed5849652dd0315.
//
// Solidity: event ServiceSharePercentUpdated(uint256 indexed percent)
func (_StreamManager *StreamManagerFilterer) ParseServiceSharePercentUpdated(log types.Log) (*StreamManagerServiceSharePercentUpdated, error) {
	event := new(StreamManagerServiceSharePercentUpdated)
	if err := _StreamManager.contract.UnpackLog(event, "ServiceSharePercentUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StreamManagerStreamApprovedIterator is returned from FilterStreamApproved and is used to iterate over the raw logs and unpacked data for StreamApproved events raised by the StreamManager contract.
type StreamManagerStreamApprovedIterator struct {
	Event *StreamManagerStreamApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerStreamApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerStreamApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerStreamApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerStreamApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerStreamApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerStreamApproved represents a StreamApproved event raised by the StreamManager contract.
type StreamManagerStreamApproved struct {
	StreamId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStreamApproved is a free log retrieval operation binding the contract event 0x8fd81831397822207cf7571ac8b61f51ae7de628b05492a586bc63c3fd23bf8c.
//
// Solidity: event StreamApproved(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) FilterStreamApproved(opts *bind.FilterOpts, streamId []*big.Int) (*StreamManagerStreamApprovedIterator, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "StreamApproved", streamIdRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerStreamApprovedIterator{contract: _StreamManager.contract, event: "StreamApproved", logs: logs, sub: sub}, nil
}

// WatchStreamApproved is a free log subscription operation binding the contract event 0x8fd81831397822207cf7571ac8b61f51ae7de628b05492a586bc63c3fd23bf8c.
//
// Solidity: event StreamApproved(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) WatchStreamApproved(opts *bind.WatchOpts, sink chan<- *StreamManagerStreamApproved, streamId []*big.Int) (event.Subscription, error) {

	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "StreamApproved", streamIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerStreamApproved)
				if err := _StreamManager.contract.UnpackLog(event, "StreamApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStreamApproved is a log parse operation binding the contract event 0x8fd81831397822207cf7571ac8b61f51ae7de628b05492a586bc63c3fd23bf8c.
//
// Solidity: event StreamApproved(uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) ParseStreamApproved(log types.Log) (*StreamManagerStreamApproved, error) {
	event := new(StreamManagerStreamApproved)
	if err := _StreamManager.contract.UnpackLog(event, "StreamApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StreamManagerStreamCreatedIterator is returned from FilterStreamCreated and is used to iterate over the raw logs and unpacked data for StreamCreated events raised by the StreamManager contract.
type StreamManagerStreamCreatedIterator struct {
	Event *StreamManagerStreamCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerStreamCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerStreamCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerStreamCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerStreamCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerStreamCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerStreamCreated represents a StreamCreated event raised by the StreamManager contract.
type StreamManagerStreamCreated struct {
	StreamAddress common.Address
	StreamId      *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterStreamCreated is a free log retrieval operation binding the contract event 0x1bd63527042f119292b792487cee2f3e2f788737aa8ce9c0b5e79a2e17bd6bab.
//
// Solidity: event StreamCreated(address indexed streamAddress, uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) FilterStreamCreated(opts *bind.FilterOpts, streamAddress []common.Address, streamId []*big.Int) (*StreamManagerStreamCreatedIterator, error) {

	var streamAddressRule []interface{}
	for _, streamAddressItem := range streamAddress {
		streamAddressRule = append(streamAddressRule, streamAddressItem)
	}
	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "StreamCreated", streamAddressRule, streamIdRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerStreamCreatedIterator{contract: _StreamManager.contract, event: "StreamCreated", logs: logs, sub: sub}, nil
}

// WatchStreamCreated is a free log subscription operation binding the contract event 0x1bd63527042f119292b792487cee2f3e2f788737aa8ce9c0b5e79a2e17bd6bab.
//
// Solidity: event StreamCreated(address indexed streamAddress, uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) WatchStreamCreated(opts *bind.WatchOpts, sink chan<- *StreamManagerStreamCreated, streamAddress []common.Address, streamId []*big.Int) (event.Subscription, error) {

	var streamAddressRule []interface{}
	for _, streamAddressItem := range streamAddress {
		streamAddressRule = append(streamAddressRule, streamAddressItem)
	}
	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "StreamCreated", streamAddressRule, streamIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerStreamCreated)
				if err := _StreamManager.contract.UnpackLog(event, "StreamCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStreamCreated is a log parse operation binding the contract event 0x1bd63527042f119292b792487cee2f3e2f788737aa8ce9c0b5e79a2e17bd6bab.
//
// Solidity: event StreamCreated(address indexed streamAddress, uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) ParseStreamCreated(log types.Log) (*StreamManagerStreamCreated, error) {
	event := new(StreamManagerStreamCreated)
	if err := _StreamManager.contract.UnpackLog(event, "StreamCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StreamManagerStreamRequestedIterator is returned from FilterStreamRequested and is used to iterate over the raw logs and unpacked data for StreamRequested events raised by the StreamManager contract.
type StreamManagerStreamRequestedIterator struct {
	Event *StreamManagerStreamRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StreamManagerStreamRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StreamManagerStreamRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StreamManagerStreamRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StreamManagerStreamRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StreamManagerStreamRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StreamManagerStreamRequested represents a StreamRequested event raised by the StreamManager contract.
type StreamManagerStreamRequested struct {
	Client   common.Address
	StreamId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterStreamRequested is a free log retrieval operation binding the contract event 0xcf93cb8f3f726dd083e429df912bf338cc7f82cc3344b3ab5fa960ef0357e321.
//
// Solidity: event StreamRequested(address indexed client, uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) FilterStreamRequested(opts *bind.FilterOpts, client []common.Address, streamId []*big.Int) (*StreamManagerStreamRequestedIterator, error) {

	var clientRule []interface{}
	for _, clientItem := range client {
		clientRule = append(clientRule, clientItem)
	}
	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.FilterLogs(opts, "StreamRequested", clientRule, streamIdRule)
	if err != nil {
		return nil, err
	}
	return &StreamManagerStreamRequestedIterator{contract: _StreamManager.contract, event: "StreamRequested", logs: logs, sub: sub}, nil
}

// WatchStreamRequested is a free log subscription operation binding the contract event 0xcf93cb8f3f726dd083e429df912bf338cc7f82cc3344b3ab5fa960ef0357e321.
//
// Solidity: event StreamRequested(address indexed client, uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) WatchStreamRequested(opts *bind.WatchOpts, sink chan<- *StreamManagerStreamRequested, client []common.Address, streamId []*big.Int) (event.Subscription, error) {

	var clientRule []interface{}
	for _, clientItem := range client {
		clientRule = append(clientRule, clientItem)
	}
	var streamIdRule []interface{}
	for _, streamIdItem := range streamId {
		streamIdRule = append(streamIdRule, streamIdItem)
	}

	logs, sub, err := _StreamManager.contract.WatchLogs(opts, "StreamRequested", clientRule, streamIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StreamManagerStreamRequested)
				if err := _StreamManager.contract.UnpackLog(event, "StreamRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStreamRequested is a log parse operation binding the contract event 0xcf93cb8f3f726dd083e429df912bf338cc7f82cc3344b3ab5fa960ef0357e321.
//
// Solidity: event StreamRequested(address indexed client, uint256 indexed streamId)
func (_StreamManager *StreamManagerFilterer) ParseStreamRequested(log types.Log) (*StreamManagerStreamRequested, error) {
	event := new(StreamManagerStreamRequested)
	if err := _StreamManager.contract.UnpackLog(event, "StreamRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
